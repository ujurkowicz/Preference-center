%%[
/* ----------------------------------------------------------------------- */
/* -----------------------------GLOBAL VARIABLES ------------------------- */
/* ----------------------------------------------------------------------- */
    set @TOKEN_DE = 'ENT.Verification Tokens'
    set @MDE = 'ENT.MDE'
    set @PREFERENCE_AREAS_DE= 'ENT.Preference Areas'
    set @CONSENTS_DE = 'ENT.Consents'
    set @TRIGGER_SEND_DEF = "160303"
      
    var @page,
    var @emailAddress,
    var @token,
    var @expirationDate,
    var @isUsed,
    var @subscriberKey

    set @page=RequestParameter('page')

/* ----------------------------------------------------------------------- */
/* --------------------------------LOGIN---------------------------------- */
/* ----------------------------------------------------------------------- */    
    IF (@page=='login') THEN
        /*Generate token*/
        set @emailAddress=RequestParameter('EmailAddress')
        set @token=random(100000,999999)
        set @expirationDate=DateAdd(Now(), 1, "H")
        set @isUsed=False
        UpsertDE(@TOKEN_DE,1,"EmailAddress", @emailAddress, "Token", @token, "ExpirationDate", @expirationDate, "IsUsed", @isUsed)
        
        /*Trigger Send */
        var @ts, @tsDef, @ts_sub, @ts_statusCode, @ts_statusMsg, @errorCode
        set @ts = CreateObject("TriggeredSend")
        set @tsDef = CreateObject("TriggeredSendDefinition")
        SetObjectProperty(@tsDef, "CustomerKey", @TRIGGER_SEND_DEF)
        SetObjectProperty(@ts, "TriggeredSendDefinition", @tsDef)
        set @ts_sub = CreateObject("Subscriber")
        SetObjectProperty(@ts_sub, "EmailAddress", @emailAddress)
        SetObjectProperty(@ts_sub, "SubscriberKey", @emailAddress)
        AddObjectArrayItem(@ts, "Subscribers", @ts_sub)
        set @ts_statusCode = InvokeCreate(@ts, @ts_statusMsg, @errorCode)

/* ----------------------------------------------------------------------- */
/* ---------------------------AUTHENTICATION------------------------------ */
/* ----------------------------------------------------------------------- */    
    ELSEIF (@page=='authentication') THEN
        var  @rows,  @rowCount, @row, @error
        set @emailAddress=RequestParameter('EmailAddress')
        set @rows = LookupRows(@TOKEN_DE,"EmailAddress", @emailAddress)
        set @rowCount = rowCount(@rows)

        /*Check if token is valid, has been already used or after expiration date*/
        IF @rowCount > 0 THEN 
            set @row = row(@rows, 1)
            set @token = field(@row, "Token")
            IF (RequestParameter("token") == @token) THEN
                set @expirationDate = field(@row, "ExpirationDate")
                IF (Now() <= @expirationDate) THEN
                    set @isUsed = field(@row, "isUsed")
                    IF (@isUsed == False) THEN 
                        UpsertDE(@TOKEN_DE,1,"EmailAddress", @emailAddress, "IsUsed", "True")
                    ELSE
                        set @error= 'The verification code has been used'
                    ENDIF
                ELSE 
                    set @error = 'The verification code has expired'
                ENDIF
            ELSE 
                set @error = 'Incorrect verification code provided'
            ENDIF 
        ELSE 
            set @error = 'No email provided'
        ENDIF

/* ----------------------------------------------------------------------- */
/* -------------------------------DATA FORM------------------------------- */
/* ----------------------------------------------------------------------- */   
    ELSEIF (@page=='dataForm') THEN
        var @firstName, @lastName, @country, @phone, @region
        set @emailAddress = RequestParameter('EmailAddress')
        set @firstName = RequestParameter('firstName')
        set @lastName = RequestParameter('lastName')
        set @phone = RequestParameter('phone')
        set @country = RequestParameter('country')
        set @region = RequestParameter('region')

        /*CHECK IF EMAIL ALREADY EXISTS IN RECORDS IN MDE IF FIELD: PERSONALEMAIL, WORKEMAIL, UNIVERSITYEMAIL */
        set @personalRows = LookupRows(@MDE, 'PersonalEmail', @emailAddress)
        set @workRows = LookupRows(@MDE, 'WorkEmail', @emailAddress)
        set @universityRows = LookupRows(@MDE, 'UniversityEmail', @emailAddress)

        IF (rowcount(@personalRows)==0 AND rowcount(@workRows)==0 AND rowcount(@universityRows)==0) THEN
                /*CREATE SALESFORCE CONTACT, TAKE ITS ID AS SUBSCRIBERKEY IN MDE*/
                set @subscriberKey = CreateSalesforceObject (
                    "Contact", 3,
                    "FirstName", @firstName,
                    "LastName", @lastName,
                    "Email", @emailAddress
                )
                /*UPSERT MDE*/
                UpsertDE(@MDE,1,'SubscriberKey', @subscriberKey, "PersonalEmail", @emailAddress,
                'FirstName', @firstName, 'LastName', @lastName, 'Country', @country, 'Phone', @phone, 'Region', @region)
        ELSE
            IF (rowcount(@personalRows)==1)  THEN
                set @row=row(@personalRows,1)
                set @subscriberKey=field(@row, "SubscriberKey")
            ELSEIF (rowcount(@workRows)==1)  THEN
                set @row=row(@workRows,1)
                set @subscriberKey=field(@row, "SubscriberKey")
            ELSEIF (rowcount(@universityRows)==1)  THEN
                set @row=row(@universityRows,1)
                set @subscriberKey=field(@urow, "SubscriberKey")
            ENDIF
            /*UPSERT MDE*/
            UpsertDE(@MDE,1,"SubscriberKey", @subscriberKey, 
            'FirstName', @firstName, 'LastName', @lastName, 'Country', @country, 'Phone', @phone, 'Region', @region)
        ENDIF

/* ----------------------------------------------------------------------- */
/* ---------------------------SUBSCRIPTION FORM--------------------------- */
/* ----------------------------------------------------------------------- */ 
    ELSEIF (@page=='subscriptionForm') THEN
        set @subscriberKey = RequestParameter('SubscriberKey')
        IF (@subscriberKey == 'undefined') THEN
            set @error = 'No subscriber key provided'
        ENDIF
        set @prefAreasIds = RequestParameter('prefAreasIds')
        set @notificationsIds = RequestParameter('notificationsIds')

    ELSEIF (@page=='unsubscribe') THEN
        set @subscriberKey = RequestParameter('SubscriberKey')
        set @emailAddress = RequestParameter('EmailAddress')
        UpsertDE(@MDE,1,"SubscriberKey", @subscriberKey, 
        'Status', false);
    ENDIF

]%%
<script type="text/javascript" runat="server">
    Platform.Load("Core", "1.1.1");
    var PREFERENCE_AREAS_DE_EK = 'A8AAE3B1-9927-477E-AFC5-51D98774F723';
    var NOTIFICATIONS_DE_EK = 'FE5B10AD-4155-4087-99CF-3B2D932C8F56';
    var CONSENTS_DE_EK = '8A43B803-C8CD-46CB-9A88-5A4A0CA0102A';
    var LID = '241';
    var MID = '510007705';
            
    var page = Variable.GetValue("@page");
    var error = Variable.GetValue("@error");
    var email = Variable.GetValue("@emailAddress");
    var subscriberKey = Variable.GetValue("@subscriberKey");
    var statusCode=Variable.GetValue("@errorCode")

    if (page == 'login') {
        try {
            var expirationDate = Platform.Variable.GetValue("@expirationDate");
            var token = Platform.Variable.GetValue("@token");
            Platform.Response.SetCookie("userlg", token, expirationDate, true);
        }
        catch(e) {
            var error = Platform.Function.Stringify(e);
        }
    }

    if (page == 'dataForm' || page == 'subscriptionForm') {
        var consentsDE, preferenceAreas, notifications, previousPreferenceAreas, previousNotifications;
        try {
            consentsDE = DataExtension.Init(CONSENTS_DE_EK);
            var preferenceAreasDE = DataExtension.Init(PREFERENCE_AREAS_DE_EK);
            var notificationsDE = DataExtension.Init(NOTIFICATIONS_DE_EK);
            preferenceAreas = preferenceAreasDE.Rows.Retrieve();
            notifications = notificationsDE.Rows.Retrieve();
            previousPreferenceAreas = getCheckedConsents("PreferenceArea");
            previousNotifications = getCheckedConsents("Notification");
        }
        catch(e) {
            var error = Platform.Function.Stringify(e);
        }
    }

    if (page=='subscriptionForm') {
        try {
            var currentPrefAreasStringify = Variable.GetValue("@prefAreasIds");
            var currentNotificationsStringify = Variable.GetValue("@notificationsIds");
            
            var previousPreferenceAreasIds=[];
            for (i=0; i<previousPreferenceAreas.length; i++) {
                previousPreferenceAreasIds.push(previousPreferenceAreas[i].AreaId);
            }
            
            var previousNotificationsIds=[];
            for (i=0; i<previousNotifications.length; i++) {
                previousNotificationsIds.push(previousNotifications[i].NotificationId);
            }
    
            var currentPrefAreas = currentPrefAreasStringify.split(',');
            var currentNotifications = currentNotificationsStringify.split(',');
            
            var prefAreasToAdd = arrDiff(currentPrefAreas, previousPreferenceAreasIds.toString());
            var prefAreasToDelete = arrDiff(previousPreferenceAreasIds, currentPrefAreasStringify);

            notificationsToAdd = arrDiff(currentNotifications, previousNotificationsIds.toString());
            notificationsToDelete = arrDiff(previousNotificationsIds, currentNotificationsStringify);
    
            for (i = 0; i < prefAreasToDelete.length; i++) {
                consentsDE.Rows.Remove(["SubscriberKey", "AreaId"], [subscriberKey, prefAreasToDelete[i]]);
            }
            for (i = 0; i < notificationsToDelete.length; i++) {
                consentsDE.Rows.Remove(["SubscriberKey", "NotificationId"], [subscriberKey, notificationsToDelete[i]]);
            }
            consentsDE.Rows.Add(addNewRows("PreferenceArea"));
            consentsDE.Rows.Add(addNewRows("Notification"));
        }
        catch(e) {
            var error = Platform.Function.Stringify(e);
        }
    }

    if (page == 'unsubscribe') {
        var prox = new Script.Util.WSProxy();
        /* Set ClientID */
        prox.setClientId({ "ID": MID}); //Impersonates the BU
        try{
            unsubscribe(email);
            unsubscribe(subscriberKey);
        }
        catch(e) {
            var error = Platform.Function.Stringify(e);
        }
    }

    function unsubscribe(subkey) {
        var props = [
            { Name: "SubscriberKey", Value: subkey },
            { Name: "ListID", Value: LID },
            { Name: "Reason", Value: "WSProxy one click unsubscribe" }
             ];
        try {
            var data = prox.execute(props, "LogUnsubEvent");
            var unsubStatus = Platform.Function.Stringify(data);
        }
        catch(e) {
            var error = Platform.Function.Stringify(e);
        }
    }

    function addNewRows(type){
        var rows=[];
        if (type=="PreferenceArea") {
            for (var i=0; i<prefAreasToAdd.length;i++) {
                var newConsent ={
                    Id: GUID(),
                    SubscriberKey: subscriberKey,
                    Type: "PreferenceArea",
                    AreaId: prefAreasToAdd[i]
                }
                rows.push(newConsent);
            }
        }
        else if (type=="Notification") {
            for (var i=0; i<notificationsToAdd.length;i++) {
                var newConsent ={
                    Id: GUID(),
                    SubscriberKey: subscriberKey,
                    Type: "Notification",
                    NotificationId: notificationsToAdd[i]
                }
                rows.push(newConsent);
            }
        }
        return rows; 
    }

    function getCheckedConsents(assetType){
        var filter1 = {
            Property: "SubscriberKey",
            SimpleOperator: "equals",
            Value: subscriberKey
        }
        var complexFilter = {
            LeftOperand: filter1,
            LogicalOperator: "AND",
            RightOperand: {
                Property: "Type",
                SimpleOperator: "equals",
                Value: assetType
            } 
        }
        return consentsDE.Rows.Retrieve(complexFilter);
    }

    /*Find the difference between two arrays*/
    function arrDiff(arr, stringifyArr){
        var diffArr=[];
        for (i = 0; i < arr.length; i++) {
          if (stringifyArr.indexOf(arr[i]) == -1) diffArr.push(arr[i]);
        }
        return diffArr;
    }

    var result = { 
        Page: page,
        Token: token,
        Error: error,
        Email: email,
        SubscriberKey: subscriberKey,
        PreferenceAreas: preferenceAreas,
        Notifications: notifications,
        CheckedPreferenceAreas: previousPreferenceAreas,
        CheckedNotifications: previousNotifications,
        TriggerSend: statusCode,
        UsubStatus: unsubStatus
        }
    stringifiedResult = Stringify(result);
          
</script>
<ctrl:var name=stringifiedResult />